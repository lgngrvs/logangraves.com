2021-12-26
Work Time: 1 hour
I deleted all the files (in the development branch) today and made a roadmap. My plan is to build the site starting with basic backend features and no styles, then add basic styles, and go from there. The problem with what I did initially -- building the site frontend and then trying to go to the backend -- was that I was trying to fit scripting in around my styling, rather than making elegant styling around the existing scripts. Attempting to integrate the existing folders and pages with all the things needed for the backend was extremely painful. Keeping this in mind, I'm going to try to manage the complexity of this project as best as I can; I am going to try to make the project as simple as possible. (Don't want to have to delete all the files in this project again.) The first step will be setting up the site filesystem, installing relevant packages, etc... I just absolutely despise trying to develop on a Windows computer, because Powershell is trash (i.e. I don't know it) and WSL makes dealing with things (such as installing software) more confusing. The only potential problem I see myself facing in this project is the fact that I have never used a web framework before, and I don't know anything about flask. :)

2021-12-27
Work Time: 2 hours
Today's goal was to get the repo set up to start coding (install necessary packages, set up the venv, create .gitignore, etc). I found a few great reference sites for this project [(1) https://flask.palletsprojects.com/en/2.0.x/tutorial/factory/ (2) https://flask.palletsprojects.com/en/1.1.x/tutorial/ (3) https://charlesleifer.com/blog/how-to-make-a-flask-blog-in-one-hour-or-less/] which I can use to figure out what's needed. (1) is helpful because it supplies Windows commands; I know how to use Bash but as I wrote above do not know powershell at all. I ended up working for about 2 hours, give or take a bit, and though I barely got anything actually done on the repo (I created the app.py file, installed venv, set up VScode for the project, and made a .gitignore) I learned a lot about the python programming language in general. It happened that I realized, once I had set up VSCode and venv, etc. etc., how little I actaully knew about the inner workings of the language, so when exposed to the *actual code* contained in the various links above it was made obvious that I wasn't really ready to start; I wasn't at a place where I could study the code and then write my own simplified version of it that fit my own purposes. Thus, I changed my plan, and spent about 45-75 min on learning about python and writing down what I learned into a sort of dictionary-wiki-thing. Most of what I learned was about objects and classes, and what an 'object-oriented' programming language actually is. I intend to put that up on the site as well (in the same way that I will put this up -- I think that having hidden text files around the site that go deeper into its development could be one of the various fun surprises I leave around) once I feel comfortable in my knowledge, i.e. get around to it; I think it could be a helpful resource for other beginners. Currently I have a tag in Standard Notes with all my project files in it -- the roadmap, site design inspiration, the aforementioned dictionary-wiki-thing, and content ideas -- eventually I'll migrate it over, but I don't want to have to maintain 2 versions of the project. I expect infrequent updates. Luckily SN has version history, so chrological history won't be a problem. You know, this being the second log entry, I haven't really explained this project and what's going on much. I'll give a bit of detail, but not too much since this log is for me. ("log" is better than "blog" so maybe I'll use that to refer to posts. Blog is web-log anyway so they mean the same thing. But I digress.) My goal here is to build myself a website, frontend and backend,partly to learn everything that I need to do so, but also partly to have fun on the design and the code sides. It's a fun learning project, basically. This is part of my progression from basics: my first ever real web project, Lens (see my github) was frontend-only, messy, and all-around problematic. I didn't use any web frameworks, in order to learn the fundamentals -- somewhat like people building personal websites back in "the old web" that I hear about, if such a thing ever existed. There may be ethical issues with it too, but since it's such a poor project I'm not worried about it. The point is that I am building my way up towards actually having useful skills, but I want to know the underlying technology (albeit at a high level of abstraction) before I do so. Anyway, I am fully aware that there will likely be security issues if I write my own backend. I expect that to be a learning experience for me as well. (Think of it as incident response training :) .) We'll all see what happens. In the meantime, I'm aiming for simplicity, good design, and above all fun in this project. The next work session will be focused on getting a debug server up locally, learning some SQLite basics, and hopefully using those skills to set up a system to generate static pages and log posts by putting them into the db --> generating them using Jinja2 Templates. Oh, and I'll re-learn how function decorators work because they continue to confuse me. (What does @app-route("/") actually do, behind the scenes??) And hopefully I'll write less, because this is getting exhausting.

2021-12-28
Work time: 3.5 hours
Alright, I now have a working dev server, with posts stored in a SQLite database but accessible via the index of the post (within the database) in the URL! I used a digitalocean tutorial (https://www.digitalocean.com/community/tutorials/how-to-use-an-sqlite-database-in-a-flask-application) to figure out how to write to and access items from the database, but I wrote my own code for everything except templates/index.html. Next step is to add a few columns to the database, and make posts accessible by slug rather than index. I also need some error handling (404 pages). I learned a lot, mainly relating to SQL and SQLite, and added a few basic things to my wiki-dictionary thing. I also was embarassingly reminded (the hard way) that python has data types. Don't forget that next time, or you'll get "<built-in method title of str object at 0x00000200133D0830>" again :P

2021-12-29
Work time: 5.5 hours
I made a lot of progress since the last log, and I don't want to write a whole essay about what's happened. Posts are now accessible via url (using their slug or their post number), as well as through tags. Tag pages display all the posts that have that tag. It's great! Next up is the search function, and I think I'm going to be using WTForms. It'll be hard, since I have no experience with HTML forms, but I guess what'll happen will happen. I'm a little worried about dealing with posts within directories, but I think I know how to deal with that. I may end up using a whole different table for different directories? I'm not sure. I guess that complexity will be added when necessary. 

2021-12-30
Work time: 4 hours
So I didn't use WTForms, I just did some basic form parsing stuff that I only half-understand (the half that I understand is the fact that it's insecure /s). I don't really understand it -- my search does not use query strings or anything like that, it just passes the form data to the /search page. Not sure why there are these different things, but I'm happy with a working search function; I'll leave it for now. After doing the search function, I added markdown functionality to the site, and also the "post_parser.py" (for use on individual files, if necessary) and "post_parser_script.py" which turns markdown files stored in the /posts directory (or any directory that I specify within the file) into database entries that are then serve-able.